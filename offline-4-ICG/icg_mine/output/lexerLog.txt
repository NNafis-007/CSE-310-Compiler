Line# 1: Token <INT> Lexeme int
Line# 1: Token <ID> Lexeme a
Line# 1: Token <COMMA> Lexeme ,
Line# 1: Token <ID> Lexeme b
Line# 1: Token <COMMA> Lexeme ,
Line# 1: Token <ID> Lexeme c
Line# 1: Token <SEMICOLON> Lexeme ;
Line# 3: Token <VOID> Lexeme void
Line# 3: Token <ID> Lexeme func_a
Line# 3: Token <LPAREN> Lexeme (
Line# 3: Token <RPAREN> Lexeme )
Line# 3: Token <LCURL> Lexeme {
Line# 4: Token <ID> Lexeme a
Line# 4: Token <ASSIGNOP> Lexeme =
Line# 4: Token <CONST_INT> Lexeme 7
Line# 4: Token <SEMICOLON> Lexeme ;
Line# 5: Token <RCURL> Lexeme }
Line# 8: Token <INT> Lexeme int
Line# 8: Token <ID> Lexeme bar
Line# 8: Token <LPAREN> Lexeme (
Line# 8: Token <INT> Lexeme int
Line# 8: Token <ID> Lexeme a
Line# 8: Token <COMMA> Lexeme ,
Line# 8: Token <INT> Lexeme int
Line# 8: Token <ID> Lexeme b
Line# 8: Token <RPAREN> Lexeme )
Line# 8: Token <LCURL> Lexeme {
Line# 9: Token <ID> Lexeme c
Line# 9: Token <ASSIGNOP> Lexeme =
Line# 9: Token <CONST_INT> Lexeme 4
Line# 9: Token <MULOP> Lexeme *
Line# 9: Token <ID> Lexeme a
Line# 9: Token <ADDOP> Lexeme +
Line# 9: Token <CONST_INT> Lexeme 2
Line# 9: Token <MULOP> Lexeme *
Line# 9: Token <ID> Lexeme b
Line# 9: Token <SEMICOLON> Lexeme ;
Line# 10: Token <RETURN> Lexeme return
Line# 10: Token <ID> Lexeme c
Line# 10: Token <SEMICOLON> Lexeme ;
Line# 11: Token <RCURL> Lexeme }
Line# 13: Token <INT> Lexeme int
Line# 13: Token <ID> Lexeme main
Line# 13: Token <LPAREN> Lexeme (
Line# 13: Token <RPAREN> Lexeme )
Line# 13: Token <LCURL> Lexeme {
Line# 15: Token <INT> Lexeme int
Line# 15: Token <ID> Lexeme i
Line# 15: Token <COMMA> Lexeme ,
Line# 15: Token <ID> Lexeme j
Line# 15: Token <COMMA> Lexeme ,
Line# 15: Token <ID> Lexeme k
Line# 15: Token <COMMA> Lexeme ,
Line# 15: Token <ID> Lexeme l
Line# 15: Token <SEMICOLON> Lexeme ;
Line# 17: Token <ID> Lexeme i
Line# 17: Token <ASSIGNOP> Lexeme =
Line# 17: Token <CONST_INT> Lexeme 5
Line# 17: Token <SEMICOLON> Lexeme ;
Line# 18: Token <ID> Lexeme j
Line# 18: Token <ASSIGNOP> Lexeme =
Line# 18: Token <CONST_INT> Lexeme 6
Line# 18: Token <SEMICOLON> Lexeme ;
Line# 20: Token <SINGLE LINE COMMENT> Lexeme // func_a();
Line# 21: Token <SINGLE LINE COMMENT> Lexeme // println(a);
Line# 23: Token <SINGLE LINE COMMENT> Lexeme // k = foo(i);
Line# 24: Token <SINGLE LINE COMMENT> Lexeme // println(k);
Line# 26: Token <ID> Lexeme l
Line# 26: Token <ASSIGNOP> Lexeme =
Line# 26: Token <ID> Lexeme bar
Line# 26: Token <LPAREN> Lexeme (
Line# 26: Token <ID> Lexeme i
Line# 26: Token <COMMA> Lexeme ,
Line# 26: Token <ID> Lexeme j
Line# 26: Token <RPAREN> Lexeme )
Line# 26: Token <SEMICOLON> Lexeme ;
Line# 27: Token <PRINTLN> Lexeme println
Line# 27: Token <LPAREN> Lexeme (
Line# 27: Token <ID> Lexeme l
Line# 27: Token <RPAREN> Lexeme )
Line# 27: Token <SEMICOLON> Lexeme ;
Line# 29: Token <SINGLE LINE COMMENT> Lexeme // j = 6 * bar(i,j) + 2 - 3 * foo(i);
Line# 30: Token <SINGLE LINE COMMENT> Lexeme // println(j);
Line# 33: Token <RETURN> Lexeme return
Line# 33: Token <CONST_INT> Lexeme 0
Line# 33: Token <SEMICOLON> Lexeme ;
Line# 34: Token <RCURL> Lexeme }
