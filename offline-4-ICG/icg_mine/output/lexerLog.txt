Line# 1: Token <INT> Lexeme int
Line# 1: Token <ID> Lexeme w
Line# 1: Token <LTHIRD> Lexeme [
Line# 1: Token <CONST_INT> Lexeme 10
Line# 1: Token <RTHIRD> Lexeme ]
Line# 1: Token <SEMICOLON> Lexeme ;
Line# 2: Token <INT> Lexeme int
Line# 2: Token <ID> Lexeme main
Line# 2: Token <LPAREN> Lexeme (
Line# 2: Token <RPAREN> Lexeme )
Line# 2: Token <LCURL> Lexeme {
Line# 4: Token <INT> Lexeme int
Line# 4: Token <ID> Lexeme x
Line# 4: Token <LTHIRD> Lexeme [
Line# 4: Token <CONST_INT> Lexeme 10
Line# 4: Token <RTHIRD> Lexeme ]
Line# 4: Token <COMMA> Lexeme ,
Line# 4: Token <ID> Lexeme a
Line# 4: Token <COMMA> Lexeme ,
Line# 4: Token <ID> Lexeme b
Line# 4: Token <LTHIRD> Lexeme [
Line# 4: Token <CONST_INT> Lexeme 4
Line# 4: Token <RTHIRD> Lexeme ]
Line# 4: Token <SEMICOLON> Lexeme ;
Line# 5: Token <SINGLE LINE COMMENT> Lexeme // w[0]=-2;
Line# 6: Token <SINGLE LINE COMMENT> Lexeme // x[0]=w[0];
Line# 7: Token <SINGLE LINE COMMENT> Lexeme // i=x[0];	
Line# 8: Token <SINGLE LINE COMMENT> Lexeme // println(i);
Line# 9: Token <SINGLE LINE COMMENT> Lexeme // x[1]=w[0]++;
Line# 10: Token <SINGLE LINE COMMENT> Lexeme // i=x[1];	
Line# 11: Token <SINGLE LINE COMMENT> Lexeme // println(i);
Line# 12: Token <SINGLE LINE COMMENT> Lexeme // i=w[0];
Line# 13: Token <SINGLE LINE COMMENT> Lexeme // println(i);	
Line# 15: Token <SINGLE LINE COMMENT> Lexeme // i=i+0;
Line# 16: Token <SINGLE LINE COMMENT> Lexeme // i=i-0;
Line# 17: Token <SINGLE LINE COMMENT> Lexeme // i=i*1;
Line# 18: Token <SINGLE LINE COMMENT> Lexeme // println(i);	
Line# 20: Token <SINGLE LINE COMMENT> Lexeme // if((i>0 && i<10) || (i<0 && i>-10))
Line# 21: Token <SINGLE LINE COMMENT> Lexeme // 	i=100;
Line# 22: Token <SINGLE LINE COMMENT> Lexeme // else 
Line# 23: Token <SINGLE LINE COMMENT> Lexeme // 	i=200;
Line# 24: Token <SINGLE LINE COMMENT> Lexeme // println(i);	
Line# 26: Token <RETURN> Lexeme return
Line# 26: Token <CONST_INT> Lexeme 0
Line# 26: Token <SEMICOLON> Lexeme ;
Line# 27: Token <RCURL> Lexeme }
