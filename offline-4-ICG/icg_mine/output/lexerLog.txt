Line# 1: Token <INT> Lexeme int
Line# 1: Token <ID> Lexeme w
Line# 1: Token <LTHIRD> Lexeme [
Line# 1: Token <CONST_INT> Lexeme 10
Line# 1: Token <RTHIRD> Lexeme ]
Line# 1: Token <SEMICOLON> Lexeme ;
Line# 2: Token <INT> Lexeme int
Line# 2: Token <ID> Lexeme func
Line# 2: Token <LPAREN> Lexeme (
Line# 2: Token <INT> Lexeme int
Line# 2: Token <ID> Lexeme n
Line# 2: Token <RPAREN> Lexeme )
Line# 2: Token <LCURL> Lexeme {
Line# 3: Token <INT> Lexeme int
Line# 3: Token <ID> Lexeme i
Line# 3: Token <SEMICOLON> Lexeme ;
Line# 4: Token <IF> Lexeme if
Line# 4: Token <LPAREN> Lexeme (
Line# 4: Token <ID> Lexeme n
Line# 4: Token <CONST_INT> Lexeme 0
Line# 4: Token <RPAREN> Lexeme )
Line# 4: Token <RETURN> Lexeme return
Line# 4: Token <CONST_INT> Lexeme 0
Line# 4: Token <SEMICOLON> Lexeme ;
Line# 5: Token <ID> Lexeme i
Line# 5: Token <ASSIGNOP> Lexeme =
Line# 5: Token <ID> Lexeme n
Line# 5: Token <SEMICOLON> Lexeme ;
Line# 6: Token <RETURN> Lexeme return
Line# 6: Token <ID> Lexeme func
Line# 6: Token <LPAREN> Lexeme (
Line# 6: Token <ID> Lexeme n
Line# 6: Token <ADDOP> Lexeme -
Line# 6: Token <CONST_INT> Lexeme 1
Line# 6: Token <RPAREN> Lexeme )
Line# 6: Token <ADDOP> Lexeme +
Line# 6: Token <ID> Lexeme i
Line# 6: Token <SEMICOLON> Lexeme ;
Line# 7: Token <RCURL> Lexeme }
Line# 9: Token <INT> Lexeme int
Line# 9: Token <ID> Lexeme func2
Line# 9: Token <LPAREN> Lexeme (
Line# 9: Token <INT> Lexeme int
Line# 9: Token <ID> Lexeme n
Line# 9: Token <RPAREN> Lexeme )
Line# 9: Token <LCURL> Lexeme {
Line# 10: Token <INT> Lexeme int
Line# 10: Token <ID> Lexeme i
Line# 10: Token <SEMICOLON> Lexeme ;
Line# 11: Token <IF> Lexeme if
Line# 11: Token <LPAREN> Lexeme (
Line# 11: Token <ID> Lexeme n
Line# 11: Token <CONST_INT> Lexeme 0
Line# 11: Token <RPAREN> Lexeme )
Line# 11: Token <RETURN> Lexeme return
Line# 11: Token <CONST_INT> Lexeme 0
Line# 11: Token <SEMICOLON> Lexeme ;
Line# 12: Token <ID> Lexeme i
Line# 12: Token <ASSIGNOP> Lexeme =
Line# 12: Token <ID> Lexeme n
Line# 12: Token <SEMICOLON> Lexeme ;
Line# 13: Token <RETURN> Lexeme return
Line# 13: Token <ID> Lexeme func
Line# 13: Token <LPAREN> Lexeme (
Line# 13: Token <ID> Lexeme n
Line# 13: Token <ADDOP> Lexeme -
Line# 13: Token <CONST_INT> Lexeme 1
Line# 13: Token <RPAREN> Lexeme )
Line# 13: Token <ADDOP> Lexeme +
Line# 13: Token <ID> Lexeme i
Line# 13: Token <SEMICOLON> Lexeme ;
Line# 14: Token <RCURL> Lexeme }
Line# 16: Token <INT> Lexeme int
Line# 16: Token <ID> Lexeme x
Line# 16: Token <SEMICOLON> Lexeme ;
Line# 17: Token <INT> Lexeme int
Line# 17: Token <ID> Lexeme main
Line# 17: Token <LPAREN> Lexeme (
Line# 17: Token <RPAREN> Lexeme )
Line# 17: Token <LCURL> Lexeme {
Line# 18: Token <INT> Lexeme int
Line# 18: Token <ID> Lexeme a
Line# 18: Token <SEMICOLON> Lexeme ;
Line# 19: Token <ID> Lexeme a
Line# 19: Token <ASSIGNOP> Lexeme =
Line# 19: Token <ID> Lexeme func
Line# 19: Token <LPAREN> Lexeme (
Line# 19: Token <CONST_INT> Lexeme 7
Line# 19: Token <RPAREN> Lexeme )
Line# 19: Token <SEMICOLON> Lexeme ;
Line# 20: Token <PRINTLN> Lexeme println
Line# 20: Token <LPAREN> Lexeme (
Line# 20: Token <ID> Lexeme a
Line# 20: Token <RPAREN> Lexeme )
Line# 20: Token <SEMICOLON> Lexeme ;
Line# 21: Token <RETURN> Lexeme return
Line# 21: Token <CONST_INT> Lexeme 0
Line# 21: Token <SEMICOLON> Lexeme ;
Line# 22: Token <RCURL> Lexeme }
