f PROC
	PUSH BP
	MOV BP, SP

	SUB SP , 2
	MOV AX, 5		; Line 3
	PUSH AX
	POP AX
	MOV [BP-2], AX		; Line 3
	PUSH AX
	POP AX 		; Line 3

L1:
	MOV AX, [BP-2]
	PUSH AX
	MOV AX, 0		; Line 4
	PUSH AX
	POP AX
	POP DX
	CMP DX, AX
	JG L3
	JMP L4
L3:
	MOV AX, 1
	PUSH AX
	JMP L5
L4:
	MOV AX, 0
	PUSH AX
L5:
	POP AX
	CMP AX, 0
	JE L2
	MOV AX, [BP+4]
	PUSH AX
	INC AX
	MOV [BP+4], AX
	POP AX 		; Line 5

	MOV AX, [BP-2]
	PUSH AX
	DEC AX
	MOV [BP-2], AX
	POP AX 		; Line 6

	JMP L1
L2:
	MOV AX, 3		; Line 8
	PUSH AX
	MOV AX, [BP+4]
	PUSH AX
	POP AX
	POP CX
	CWD
	MUL CX
	PUSH AX
	MOV AX, 7		; Line 8
	PUSH AX
	POP AX
	POP DX
	XCHG DX, AX
	SUB AX, DX
	PUSH AX
	POP AX 		; Line 8
	JMP L6
	MOV AX, 9		; Line 9
	PUSH AX
	POP AX
	MOV [BP+4], AX		; Line 9
	PUSH AX
	POP AX 		; Line 9

L6:
	ADD SP, 2
	POP BP
	RET 2
f ENDP

g PROC
	PUSH BP
	MOV BP, SP

	SUB SP , 2
	SUB SP , 2
	MOV AX, [BP+6]
	PUSH AX
	CALL f		; Line 15
	PUSH AX
	MOV AX, [BP+6]
	PUSH AX
	POP AX
	POP DX
	ADD AX, DX
	PUSH AX
	MOV AX, [BP+4]
	PUSH AX
	POP AX
	POP DX
	ADD AX, DX
	PUSH AX
	POP AX
	MOV [BP-2], AX		; Line 15
	PUSH AX
	POP AX 		; Line 15

	MOV AX, [BP-2]		; Line 16
	CALL print_output
	CALL new_line

	; for loop init
	MOV AX, 0		; Line 18
	PUSH AX
	POP AX
	MOV [BP-4], AX		; Line 18
	PUSH AX
	POP AX 		; Line 18

L7: ; for loop condn check
	MOV AX, [BP-4]
	PUSH AX
	MOV AX, 7		; Line 18
	PUSH AX
	POP AX
	POP DX
	CMP DX, AX
	JL L11
	JMP L12

L11: ; i < 7 TRUE
	MOV AX, 1
	PUSH AX
	JMP L13
L12: ; i < 7 FALSE
	MOV AX, 0
	PUSH AX
L13: 
	POP AX 		; Line 18

	CMP AX, 0
	JE L8
	JMP L9
L10: ; for loop increment
	MOV AX, [BP-4]
	PUSH AX
	INC AX
	MOV [BP-4], AX
	JMP L7

L9: ; for loop body
	MOV AX, [BP-4]
	PUSH AX
	MOV AX, 3		; Line 19
	PUSH AX
	POP AX
	POP CX
	XCHG CX, AX
	CWD
	DIV CX
	PUSH DX
	MOV AX, 0		; Line 19
	PUSH AX
	POP AX
	POP DX
	CMP DX, AX
	JE L14
	JMP L15
L14: ; i%3==0 TRUE
	MOV AX, 1
	PUSH AX
	JMP L16
L15: ; i%3==0 FALSE
	MOV AX, 0
	PUSH AX
L16:
	POP AX
	CMP AX, 0
	JE L17 
	MOV AX, [BP-2]
	PUSH AX
	MOV AX, 5		; Line 20
	PUSH AX
	POP AX
	POP DX
	ADD AX, DX
	PUSH AX
	POP AX
	MOV [BP-2], AX		; Line 20
	PUSH AX
	POP AX 		; Line 20

	JMP L18
L17: ; else block in for loop
	MOV AX, [BP-2]
	PUSH AX
	MOV AX, 1		; Line 23
	PUSH AX
	POP AX
	POP DX
	XCHG DX, AX
	SUB AX, DX
	PUSH AX
	POP AX
	MOV [BP-2], AX		; Line 23
	PUSH AX
	POP AX 		; Line 23

L18:
	JMP L10
L8: ; outside for loop
	MOV AX, [BP-2]
	PUSH AX
	POP AX 		; Line 27
	JMP L19
L19:
	ADD SP, 4
	POP BP
	RET 4
g ENDP

main PROC
	MOV AX, @DATA
	MOV DS, AX
	PUSH BP
	MOV BP, SP

	SUB SP , 2
	SUB SP , 2
	SUB SP , 2
	MOV AX, 1		; Line 32
	PUSH AX
	POP AX
	MOV [BP-2], AX		; Line 32
	PUSH AX
	POP AX 		; Line 32

	MOV AX, 2		; Line 33
	PUSH AX
	POP AX
	MOV [BP-4], AX		; Line 33
	PUSH AX
	POP AX 		; Line 33

	MOV AX, [BP-2]
	PUSH AX
	MOV AX, [BP-4]
	PUSH AX
	CALL g		; Line 34
	PUSH AX
	POP AX
	MOV [BP-2], AX		; Line 34
	PUSH AX
	POP AX 		; Line 34

	MOV AX, [BP-2]		; Line 35
	CALL print_output
	CALL new_line

	MOV AX, 0		; Line 46
	PUSH AX
	POP AX 		; Line 46
	JMP L20
L20:
	ADD SP, 6
	POP BP
	MOV AX, 4Ch
	INT 21h
main ENDP
