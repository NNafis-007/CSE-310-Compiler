start : program 	<Line: 1-7>
 program : program unit 	<Line: 1-7>
  program : unit 	<Line: 1-3>
   unit : func_definition 	<Line: 1-3>
    func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 1-3>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     ID : foo	<Line: 1>
     LPAREN : (	<Line: 1>
     RPAREN : )	<Line: 1>
     compound_statement : LCURL statements RCURL 	<Line: 1-3>
      LCURL : {	<Line: 1>
      statements : statement 	<Line: 2-2>
       statement : RETURN expression SEMICOLON 	<Line: 2-2>
        RETURN : return	<Line: 2>
        expression : logic_expression 	<Line: 2-2>
         logic_expression : rel_expression 	<Line: 2-2>
          rel_expression : simple_expression 	<Line: 2-2>
           simple_expression : term 	<Line: 2-2>
            term : unary_expression 	<Line: 2-2>
             unary_expression : factor 	<Line: 2-2>
              factor : CONST_INT 	<Line: 2-2>
               CONST_INT : 0	<Line: 2>
        SEMICOLON : ;	<Line: 2>
      RCURL : }	<Line: 3>
  unit : func_definition 	<Line: 5-7>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 5-7>
    type_specifier : INT 	<Line: 5-5>
     INT : int	<Line: 5>
    ID : main	<Line: 5>
    LPAREN : (	<Line: 5>
    RPAREN : )	<Line: 5>
    compound_statement : LCURL statements RCURL 	<Line: 5-7>
     LCURL : {	<Line: 5>
     statements : statement 	<Line: 6-6>
      statement : RETURN expression SEMICOLON 	<Line: 6-6>
       RETURN : return	<Line: 6>
       expression : logic_expression 	<Line: 6-6>
        logic_expression : rel_expression 	<Line: 6-6>
         rel_expression : simple_expression 	<Line: 6-6>
          simple_expression : term 	<Line: 6-6>
           term : unary_expression 	<Line: 6-6>
            unary_expression : factor 	<Line: 6-6>
             factor : CONST_INT 	<Line: 6-6>
              CONST_INT : 0	<Line: 6>
       SEMICOLON : ;	<Line: 6>
     RCURL : }	<Line: 7>
