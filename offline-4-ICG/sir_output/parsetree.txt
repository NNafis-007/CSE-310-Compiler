start : program 	<Line: 1-20>
 program : program unit 	<Line: 1-20>
  program : unit 	<Line: 1-1>
   unit : var_declaration 	<Line: 1-1>
    var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     declaration_list : declaration_list COMMA ID 	<Line: 1-1>
      declaration_list : ID 	<Line: 1-1>
       ID : i	<Line: 1>
      COMMA : ,	<Line: 1>
      ID : j	<Line: 1>
     SEMICOLON : ;	<Line: 1>
  unit : func_definition 	<Line: 2-20>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 2-20>
    type_specifier : INT 	<Line: 2-2>
     INT : int	<Line: 2>
    ID : main	<Line: 2>
    LPAREN : (	<Line: 2>
    RPAREN : )	<Line: 2>
    compound_statement : LCURL statements RCURL 	<Line: 2-20>
     LCURL : {	<Line: 2>
     statements : statements statement 	<Line: 4-18>
      statements : statements statement 	<Line: 4-17>
       statements : statements statement 	<Line: 4-8>
        statements : statements statement 	<Line: 4-7>
         statements : statements statement 	<Line: 4-6>
          statements : statements statement 	<Line: 4-5>
           statements : statement 	<Line: 4-4>
            statement : var_declaration 	<Line: 4-4>
             var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
              type_specifier : INT 	<Line: 4-4>
               INT : int	<Line: 4>
              declaration_list : declaration_list COMMA ID 	<Line: 4-4>
               declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                 declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                  declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                   declaration_list : ID 	<Line: 4-4>
                    ID : k	<Line: 4>
                   COMMA : ,	<Line: 4>
                   ID : ll	<Line: 4>
                  COMMA : ,	<Line: 4>
                  ID : m	<Line: 4>
                 COMMA : ,	<Line: 4>
                 ID : n	<Line: 4>
                COMMA : ,	<Line: 4>
                ID : o	<Line: 4>
               COMMA : ,	<Line: 4>
               ID : p	<Line: 4>
              SEMICOLON : ;	<Line: 4>
           statement : expression_statement 	<Line: 5-5>
            expression_statement : expression SEMICOLON 	<Line: 5-5>
             expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
              variable : ID 	<Line: 5-5>
               ID : i	<Line: 5>
              ASSIGNOP : =	<Line: 5>
              logic_expression : rel_expression 	<Line: 5-5>
               rel_expression : simple_expression 	<Line: 5-5>
                simple_expression : term 	<Line: 5-5>
                 term : unary_expression 	<Line: 5-5>
                  unary_expression : factor 	<Line: 5-5>
                   factor : CONST_INT 	<Line: 5-5>
                    CONST_INT : 2	<Line: 5>
             SEMICOLON : ;	<Line: 5>
          statement : expression_statement 	<Line: 6-6>
           expression_statement : expression SEMICOLON 	<Line: 6-6>
            expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
             variable : ID 	<Line: 6-6>
              ID : j	<Line: 6>
             ASSIGNOP : =	<Line: 6>
             logic_expression : rel_expression 	<Line: 6-6>
              rel_expression : simple_expression 	<Line: 6-6>
               simple_expression : term 	<Line: 6-6>
                term : unary_expression 	<Line: 6-6>
                 unary_expression : factor 	<Line: 6-6>
                  factor : CONST_INT 	<Line: 6-6>
                   CONST_INT : 3	<Line: 6>
            SEMICOLON : ;	<Line: 6>
         statement : expression_statement 	<Line: 7-7>
          expression_statement : expression SEMICOLON 	<Line: 7-7>
           expression : variable ASSIGNOP logic_expression 	<Line: 7-7>
            variable : ID 	<Line: 7-7>
             ID : k	<Line: 7>
            ASSIGNOP : =	<Line: 7>
            logic_expression : rel_expression 	<Line: 7-7>
             rel_expression : simple_expression 	<Line: 7-7>
              simple_expression : simple_expression ADDOP term 	<Line: 7-7>
               simple_expression : term 	<Line: 7-7>
                term : term MULOP unary_expression 	<Line: 7-7>
                 term : unary_expression 	<Line: 7-7>
                  unary_expression : factor 	<Line: 7-7>
                   factor : CONST_INT 	<Line: 7-7>
                    CONST_INT : 2	<Line: 7>
                 MULOP : *	<Line: 7>
                 unary_expression : factor 	<Line: 7-7>
                  factor : variable 	<Line: 7-7>
                   variable : ID 	<Line: 7-7>
                    ID : i	<Line: 7>
               ADDOP : +	<Line: 7>
               term : term MULOP unary_expression 	<Line: 7-7>
                term : unary_expression 	<Line: 7-7>
                 unary_expression : factor 	<Line: 7-7>
                  factor : CONST_INT 	<Line: 7-7>
                   CONST_INT : 3	<Line: 7>
                MULOP : *	<Line: 7>
                unary_expression : factor 	<Line: 7-7>
                 factor : variable 	<Line: 7-7>
                  variable : ID 	<Line: 7-7>
                   ID : j	<Line: 7>
           SEMICOLON : ;	<Line: 7>
        statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 8-8>
         PRINTLN : println	<Line: 8>
         LPAREN : (	<Line: 8>
         ID : k	<Line: 8>
         RPAREN : )	<Line: 8>
         SEMICOLON : ;	<Line: 8>
       statement : expression_statement 	<Line: 17-17>
        expression_statement : expression SEMICOLON 	<Line: 17-17>
         expression : variable ASSIGNOP logic_expression 	<Line: 17-17>
          variable : ID 	<Line: 17-17>
           ID : m	<Line: 17>
          ASSIGNOP : =	<Line: 17>
          logic_expression : rel_expression 	<Line: 17-17>
           rel_expression : simple_expression 	<Line: 17-17>
            simple_expression : term 	<Line: 17-17>
             term : term MULOP unary_expression 	<Line: 17-17>
              term : unary_expression 	<Line: 17-17>
               unary_expression : factor 	<Line: 17-17>
                factor : variable 	<Line: 17-17>
                 variable : ID 	<Line: 17-17>
                  ID : k	<Line: 17>
              MULOP : %	<Line: 17>
              unary_expression : factor 	<Line: 17-17>
               factor : CONST_INT 	<Line: 17-17>
                CONST_INT : 9	<Line: 17>
         SEMICOLON : ;	<Line: 17>
      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 18-18>
       PRINTLN : println	<Line: 18>
       LPAREN : (	<Line: 18>
       ID : m	<Line: 18>
       RPAREN : )	<Line: 18>
       SEMICOLON : ;	<Line: 18>
     RCURL : }	<Line: 20>
