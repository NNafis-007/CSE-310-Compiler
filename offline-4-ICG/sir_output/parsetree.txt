start : program 	<Line: 1-33>
 program : program unit 	<Line: 1-33>
  program : unit 	<Line: 1-1>
   unit : var_declaration 	<Line: 1-1>
    var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     declaration_list : ID LSQUARE CONST_INT RSQUARE 	<Line: 1-1>
      ID : w	<Line: 1>
      LSQUARE : [	<Line: 1>
      CONST_INT : 10	<Line: 1>
      RSQUARE : ]	<Line: 1>
     SEMICOLON : ;	<Line: 1>
  unit : func_definition 	<Line: 2-33>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 2-33>
    type_specifier : INT 	<Line: 2-2>
     INT : int	<Line: 2>
    ID : main	<Line: 2>
    LPAREN : (	<Line: 2>
    RPAREN : )	<Line: 2>
    compound_statement : LCURL statements RCURL 	<Line: 2-33>
     LCURL : {	<Line: 2>
     statements : statements statement 	<Line: 4-32>
      statements : statements statement 	<Line: 4-5>
       statements : statement 	<Line: 4-4>
        statement : var_declaration 	<Line: 4-4>
         var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
          type_specifier : INT 	<Line: 4-4>
           INT : int	<Line: 4>
          declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 4-4>
           declaration_list : ID LSQUARE CONST_INT RSQUARE 	<Line: 4-4>
            ID : a	<Line: 4>
            LSQUARE : [	<Line: 4>
            CONST_INT : 3	<Line: 4>
            RSQUARE : ]	<Line: 4>
           COMMA : ,	<Line: 4>
           ID : x	<Line: 4>
           LSQUARE : [	<Line: 4>
           CONST_INT : 10	<Line: 4>
           RSQUARE : ]	<Line: 4>
          SEMICOLON : ;	<Line: 4>
       statement : expression_statement 	<Line: 5-5>
        expression_statement : expression SEMICOLON 	<Line: 5-5>
         expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
          variable : ID LSQUARE expression RSQUARE 	<Line: 5-5>
           ID : x	<Line: 5>
           LSQUARE : [	<Line: 5>
           expression : logic_expression 	<Line: 5-5>
            logic_expression : rel_expression 	<Line: 5-5>
             rel_expression : simple_expression 	<Line: 5-5>
              simple_expression : term 	<Line: 5-5>
               term : unary_expression 	<Line: 5-5>
                unary_expression : factor 	<Line: 5-5>
                 factor : CONST_INT 	<Line: 5-5>
                  CONST_INT : 3	<Line: 5>
           RSQUARE : ]	<Line: 5>
          ASSIGNOP : =	<Line: 5>
          logic_expression : rel_expression 	<Line: 5-5>
           rel_expression : simple_expression 	<Line: 5-5>
            simple_expression : term 	<Line: 5-5>
             term : unary_expression 	<Line: 5-5>
              unary_expression : factor 	<Line: 5-5>
               factor : CONST_INT 	<Line: 5-5>
                CONST_INT : 5	<Line: 5>
         SEMICOLON : ;	<Line: 5>
      statement : RETURN expression SEMICOLON 	<Line: 32-32>
       RETURN : return	<Line: 32>
       expression : logic_expression 	<Line: 32-32>
        logic_expression : rel_expression 	<Line: 32-32>
         rel_expression : simple_expression 	<Line: 32-32>
          simple_expression : term 	<Line: 32-32>
           term : unary_expression 	<Line: 32-32>
            unary_expression : factor 	<Line: 32-32>
             factor : CONST_INT 	<Line: 32-32>
              CONST_INT : 0	<Line: 32>
       SEMICOLON : ;	<Line: 32>
     RCURL : }	<Line: 33>
