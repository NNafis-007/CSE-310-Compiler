start : program 	<Line: 1-11>
 program : unit 	<Line: 1-11>
  unit : func_definition 	<Line: 1-11>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 1-11>
    type_specifier : INT 	<Line: 1-1>
     INT : int	<Line: 1>
    ID : main	<Line: 1>
    LPAREN : (	<Line: 1>
    RPAREN : )	<Line: 1>
    compound_statement : LCURL statements RCURL 	<Line: 1-11>
     LCURL : {	<Line: 1>
     statements : statements statement 	<Line: 3-10>
      statements : statements statement 	<Line: 3-7>
       statements : statement 	<Line: 3-3>
        statement : var_declaration 	<Line: 3-3>
         var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 3-3>
          type_specifier : INT 	<Line: 3-3>
           INT : int	<Line: 3>
          declaration_list : declaration_list COMMA ID 	<Line: 3-3>
           declaration_list : declaration_list COMMA ID 	<Line: 3-3>
            declaration_list : ID 	<Line: 3-3>
             ID : i	<Line: 3>
            COMMA : ,	<Line: 3>
            ID : j	<Line: 3>
           COMMA : ,	<Line: 3>
           ID : k	<Line: 3>
          SEMICOLON : ;	<Line: 3>
       statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 	<Line: 5-7>
        FOR : for	<Line: 5>
        LPAREN : (	<Line: 5>
        expression_statement : expression SEMICOLON 	<Line: 5-5>
         expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
          variable : ID 	<Line: 5-5>
           ID : i	<Line: 5>
          ASSIGNOP : =	<Line: 5>
          logic_expression : rel_expression 	<Line: 5-5>
           rel_expression : simple_expression 	<Line: 5-5>
            simple_expression : term 	<Line: 5-5>
             term : unary_expression 	<Line: 5-5>
              unary_expression : factor 	<Line: 5-5>
               factor : CONST_INT 	<Line: 5-5>
                CONST_INT : 0	<Line: 5>
         SEMICOLON : ;	<Line: 5>
        expression_statement : expression SEMICOLON 	<Line: 5-5>
         expression : logic_expression 	<Line: 5-5>
          logic_expression : rel_expression 	<Line: 5-5>
           rel_expression : simple_expression RELOP simple_expression 	<Line: 5-5>
            simple_expression : term 	<Line: 5-5>
             term : unary_expression 	<Line: 5-5>
              unary_expression : factor 	<Line: 5-5>
               factor : variable 	<Line: 5-5>
                variable : ID 	<Line: 5-5>
                 ID : i	<Line: 5>
            RELOP : <	<Line: 5>
            simple_expression : term 	<Line: 5-5>
             term : unary_expression 	<Line: 5-5>
              unary_expression : factor 	<Line: 5-5>
               factor : CONST_INT 	<Line: 5-5>
                CONST_INT : 6	<Line: 5>
         SEMICOLON : ;	<Line: 5>
        expression : logic_expression 	<Line: 5-5>
         logic_expression : rel_expression 	<Line: 5-5>
          rel_expression : simple_expression 	<Line: 5-5>
           simple_expression : term 	<Line: 5-5>
            term : unary_expression 	<Line: 5-5>
             unary_expression : factor 	<Line: 5-5>
              factor : variable INCOP 	<Line: 5-5>
               variable : ID 	<Line: 5-5>
                ID : i	<Line: 5>
               INCOP : ++	<Line: 5>
        RPAREN : )	<Line: 5>
        statement : compound_statement 	<Line: 5-7>
         compound_statement : LCURL statements RCURL 	<Line: 5-7>
          LCURL : {	<Line: 5>
          statements : statement 	<Line: 6-6>
           statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 6-6>
            PRINTLN : println	<Line: 6>
            LPAREN : (	<Line: 6>
            ID : i	<Line: 6>
            RPAREN : )	<Line: 6>
            SEMICOLON : ;	<Line: 6>
          RCURL : }	<Line: 7>
      statement : RETURN expression SEMICOLON 	<Line: 10-10>
       RETURN : return	<Line: 10>
       expression : logic_expression 	<Line: 10-10>
        logic_expression : rel_expression 	<Line: 10-10>
         rel_expression : simple_expression 	<Line: 10-10>
          simple_expression : term 	<Line: 10-10>
           term : unary_expression 	<Line: 10-10>
            unary_expression : factor 	<Line: 10-10>
             factor : CONST_INT 	<Line: 10-10>
              CONST_INT : 0	<Line: 10>
       SEMICOLON : ;	<Line: 10>
     RCURL : }	<Line: 11>
