start : program 	<Line: 1-47>
 program : program unit 	<Line: 1-47>
  program : program unit 	<Line: 1-28>
   program : unit 	<Line: 1-10>
    unit : func_definition 	<Line: 1-10>
     func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 1-10>
      type_specifier : INT 	<Line: 1-1>
       INT : int	<Line: 1>
      ID : f	<Line: 1>
      LPAREN : (	<Line: 1>
      parameter_list : type_specifier ID 	<Line: 1-1>
       type_specifier : INT 	<Line: 1-1>
        INT : int	<Line: 1>
       ID : a	<Line: 1>
      RPAREN : )	<Line: 1>
      compound_statement : LCURL statements RCURL 	<Line: 1-10>
       LCURL : {	<Line: 1>
       statements : statements statement 	<Line: 2-9>
        statements : statements statement 	<Line: 2-8>
         statements : statements statement 	<Line: 2-7>
          statements : statements statement 	<Line: 2-3>
           statements : statement 	<Line: 2-2>
            statement : var_declaration 	<Line: 2-2>
             var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 2-2>
              type_specifier : INT 	<Line: 2-2>
               INT : int	<Line: 2>
              declaration_list : ID 	<Line: 2-2>
               ID : k	<Line: 2>
              SEMICOLON : ;	<Line: 2>
           statement : expression_statement 	<Line: 3-3>
            expression_statement : expression SEMICOLON 	<Line: 3-3>
             expression : variable ASSIGNOP logic_expression 	<Line: 3-3>
              variable : ID 	<Line: 3-3>
               ID : k	<Line: 3>
              ASSIGNOP : =	<Line: 3>
              logic_expression : rel_expression 	<Line: 3-3>
               rel_expression : simple_expression 	<Line: 3-3>
                simple_expression : term 	<Line: 3-3>
                 term : unary_expression 	<Line: 3-3>
                  unary_expression : factor 	<Line: 3-3>
                   factor : CONST_INT 	<Line: 3-3>
                    CONST_INT : 5	<Line: 3>
             SEMICOLON : ;	<Line: 3>
          statement : WHILE LPAREN expression RPAREN statement 	<Line: 4-7>
           WHILE : while	<Line: 4>
           LPAREN : (	<Line: 4>
           expression : logic_expression 	<Line: 4-4>
            logic_expression : rel_expression 	<Line: 4-4>
             rel_expression : simple_expression RELOP simple_expression 	<Line: 4-4>
              simple_expression : term 	<Line: 4-4>
               term : unary_expression 	<Line: 4-4>
                unary_expression : factor 	<Line: 4-4>
                 factor : variable 	<Line: 4-4>
                  variable : ID 	<Line: 4-4>
                   ID : k	<Line: 4>
              RELOP : >	<Line: 4>
              simple_expression : term 	<Line: 4-4>
               term : unary_expression 	<Line: 4-4>
                unary_expression : factor 	<Line: 4-4>
                 factor : CONST_INT 	<Line: 4-4>
                  CONST_INT : 0	<Line: 4>
           RPAREN : )	<Line: 4>
           statement : compound_statement 	<Line: 4-7>
            compound_statement : LCURL statements RCURL 	<Line: 4-7>
             LCURL : {	<Line: 4>
             statements : statements statement 	<Line: 5-6>
              statements : statement 	<Line: 5-5>
               statement : expression_statement 	<Line: 5-5>
                expression_statement : expression SEMICOLON 	<Line: 5-5>
                 expression : logic_expression 	<Line: 5-5>
                  logic_expression : rel_expression 	<Line: 5-5>
                   rel_expression : simple_expression 	<Line: 5-5>
                    simple_expression : term 	<Line: 5-5>
                     term : unary_expression 	<Line: 5-5>
                      unary_expression : factor 	<Line: 5-5>
                       factor : variable INCOP 	<Line: 5-5>
                        variable : ID 	<Line: 5-5>
                         ID : a	<Line: 5>
                        INCOP : ++	<Line: 5>
                 SEMICOLON : ;	<Line: 5>
              statement : expression_statement 	<Line: 6-6>
               expression_statement : expression SEMICOLON 	<Line: 6-6>
                expression : logic_expression 	<Line: 6-6>
                 logic_expression : rel_expression 	<Line: 6-6>
                  rel_expression : simple_expression 	<Line: 6-6>
                   simple_expression : term 	<Line: 6-6>
                    term : unary_expression 	<Line: 6-6>
                     unary_expression : factor 	<Line: 6-6>
                      factor : variable DECOP 	<Line: 6-6>
                       variable : ID 	<Line: 6-6>
                        ID : k	<Line: 6>
                       DECOP : --	<Line: 6>
                SEMICOLON : ;	<Line: 6>
             RCURL : }	<Line: 7>
         statement : RETURN expression SEMICOLON 	<Line: 8-8>
          RETURN : return	<Line: 8>
          expression : logic_expression 	<Line: 8-8>
           logic_expression : rel_expression 	<Line: 8-8>
            rel_expression : simple_expression 	<Line: 8-8>
             simple_expression : simple_expression ADDOP term 	<Line: 8-8>
              simple_expression : term 	<Line: 8-8>
               term : term MULOP unary_expression 	<Line: 8-8>
                term : unary_expression 	<Line: 8-8>
                 unary_expression : factor 	<Line: 8-8>
                  factor : CONST_INT 	<Line: 8-8>
                   CONST_INT : 3	<Line: 8>
                MULOP : *	<Line: 8>
                unary_expression : factor 	<Line: 8-8>
                 factor : variable 	<Line: 8-8>
                  variable : ID 	<Line: 8-8>
                   ID : a	<Line: 8>
              ADDOP : -	<Line: 8>
              term : unary_expression 	<Line: 8-8>
               unary_expression : factor 	<Line: 8-8>
                factor : CONST_INT 	<Line: 8-8>
                 CONST_INT : 7	<Line: 8>
          SEMICOLON : ;	<Line: 8>
        statement : expression_statement 	<Line: 9-9>
         expression_statement : expression SEMICOLON 	<Line: 9-9>
          expression : variable ASSIGNOP logic_expression 	<Line: 9-9>
           variable : ID 	<Line: 9-9>
            ID : a	<Line: 9>
           ASSIGNOP : =	<Line: 9>
           logic_expression : rel_expression 	<Line: 9-9>
            rel_expression : simple_expression 	<Line: 9-9>
             simple_expression : term 	<Line: 9-9>
              term : unary_expression 	<Line: 9-9>
               unary_expression : factor 	<Line: 9-9>
                factor : CONST_INT 	<Line: 9-9>
                 CONST_INT : 9	<Line: 9>
          SEMICOLON : ;	<Line: 9>
       RCURL : }	<Line: 10>
   unit : func_definition 	<Line: 12-28>
    func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 12-28>
     type_specifier : INT 	<Line: 12-12>
      INT : int	<Line: 12>
     ID : g	<Line: 12>
     LPAREN : (	<Line: 12>
     parameter_list : parameter_list COMMA type_specifier ID 	<Line: 12-12>
      parameter_list : type_specifier ID 	<Line: 12-12>
       type_specifier : INT 	<Line: 12-12>
        INT : int	<Line: 12>
       ID : a	<Line: 12>
      COMMA : ,	<Line: 12>
      type_specifier : INT 	<Line: 12-12>
       INT : int	<Line: 12>
      ID : b	<Line: 12>
     RPAREN : )	<Line: 12>
     compound_statement : LCURL statements RCURL 	<Line: 12-28>
      LCURL : {	<Line: 12>
      statements : statements statement 	<Line: 14-27>
       statements : statements statement 	<Line: 14-25>
        statements : statements statement 	<Line: 14-16>
         statements : statements statement 	<Line: 14-15>
          statements : statement 	<Line: 14-14>
           statement : var_declaration 	<Line: 14-14>
            var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 14-14>
             type_specifier : INT 	<Line: 14-14>
              INT : int	<Line: 14>
             declaration_list : declaration_list COMMA ID 	<Line: 14-14>
              declaration_list : ID 	<Line: 14-14>
               ID : x	<Line: 14>
              COMMA : ,	<Line: 14>
              ID : i	<Line: 14>
             SEMICOLON : ;	<Line: 14>
          statement : expression_statement 	<Line: 15-15>
           expression_statement : expression SEMICOLON 	<Line: 15-15>
            expression : variable ASSIGNOP logic_expression 	<Line: 15-15>
             variable : ID 	<Line: 15-15>
              ID : x	<Line: 15>
             ASSIGNOP : =	<Line: 15>
             logic_expression : rel_expression 	<Line: 15-15>
              rel_expression : simple_expression 	<Line: 15-15>
               simple_expression : simple_expression ADDOP term 	<Line: 15-15>
                simple_expression : simple_expression ADDOP term 	<Line: 15-15>
                 simple_expression : term 	<Line: 15-15>
                  term : unary_expression 	<Line: 15-15>
                   unary_expression : factor 	<Line: 15-15>
                    factor : ID LPAREN argument_list RPAREN 	<Line: 15-15>
                     ID : f	<Line: 15>
                     LPAREN : (	<Line: 15>
                     argument_list : arguments 	<Line: 15-15>
                      arguments : logic_expression 	<Line: 15-15>
                       logic_expression : rel_expression 	<Line: 15-15>
                        rel_expression : simple_expression 	<Line: 15-15>
                         simple_expression : term 	<Line: 15-15>
                          term : unary_expression 	<Line: 15-15>
                           unary_expression : factor 	<Line: 15-15>
                            factor : variable 	<Line: 15-15>
                             variable : ID 	<Line: 15-15>
                              ID : a	<Line: 15>
                     RPAREN : )	<Line: 15>
                 ADDOP : +	<Line: 15>
                 term : unary_expression 	<Line: 15-15>
                  unary_expression : factor 	<Line: 15-15>
                   factor : variable 	<Line: 15-15>
                    variable : ID 	<Line: 15-15>
                     ID : a	<Line: 15>
                ADDOP : +	<Line: 15>
                term : unary_expression 	<Line: 15-15>
                 unary_expression : factor 	<Line: 15-15>
                  factor : variable 	<Line: 15-15>
                   variable : ID 	<Line: 15-15>
                    ID : b	<Line: 15>
            SEMICOLON : ;	<Line: 15>
         statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 16-16>
          PRINTLN : println	<Line: 16>
          LPAREN : (	<Line: 16>
          ID : x	<Line: 16>
          RPAREN : )	<Line: 16>
          SEMICOLON : ;	<Line: 16>
        statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 	<Line: 18-25>
         FOR : for	<Line: 18>
         LPAREN : (	<Line: 18>
         expression_statement : expression SEMICOLON 	<Line: 18-18>
          expression : variable ASSIGNOP logic_expression 	<Line: 18-18>
           variable : ID 	<Line: 18-18>
            ID : i	<Line: 18>
           ASSIGNOP : =	<Line: 18>
           logic_expression : rel_expression 	<Line: 18-18>
            rel_expression : simple_expression 	<Line: 18-18>
             simple_expression : term 	<Line: 18-18>
              term : unary_expression 	<Line: 18-18>
               unary_expression : factor 	<Line: 18-18>
                factor : CONST_INT 	<Line: 18-18>
                 CONST_INT : 0	<Line: 18>
          SEMICOLON : ;	<Line: 18>
         expression_statement : expression SEMICOLON 	<Line: 18-18>
          expression : logic_expression 	<Line: 18-18>
           logic_expression : rel_expression 	<Line: 18-18>
            rel_expression : simple_expression RELOP simple_expression 	<Line: 18-18>
             simple_expression : term 	<Line: 18-18>
              term : unary_expression 	<Line: 18-18>
               unary_expression : factor 	<Line: 18-18>
                factor : variable 	<Line: 18-18>
                 variable : ID 	<Line: 18-18>
                  ID : i	<Line: 18>
             RELOP : <	<Line: 18>
             simple_expression : term 	<Line: 18-18>
              term : unary_expression 	<Line: 18-18>
               unary_expression : factor 	<Line: 18-18>
                factor : CONST_INT 	<Line: 18-18>
                 CONST_INT : 7	<Line: 18>
          SEMICOLON : ;	<Line: 18>
         expression : logic_expression 	<Line: 18-18>
          logic_expression : rel_expression 	<Line: 18-18>
           rel_expression : simple_expression 	<Line: 18-18>
            simple_expression : term 	<Line: 18-18>
             term : unary_expression 	<Line: 18-18>
              unary_expression : factor 	<Line: 18-18>
               factor : variable INCOP 	<Line: 18-18>
                variable : ID 	<Line: 18-18>
                 ID : i	<Line: 18>
                INCOP : ++	<Line: 18>
         RPAREN : )	<Line: 18>
         statement : compound_statement 	<Line: 18-25>
          compound_statement : LCURL statements RCURL 	<Line: 18-25>
           LCURL : {	<Line: 18>
           statements : statement 	<Line: 19-24>
            statement : IF LPAREN expression RPAREN statement ELSE statement 	<Line: 19-24>
             IF : if	<Line: 19>
             LPAREN : (	<Line: 19>
             expression : logic_expression 	<Line: 19-19>
              logic_expression : rel_expression 	<Line: 19-19>
               rel_expression : simple_expression RELOP simple_expression 	<Line: 19-19>
                simple_expression : term 	<Line: 19-19>
                 term : term MULOP unary_expression 	<Line: 19-19>
                  term : unary_expression 	<Line: 19-19>
                   unary_expression : factor 	<Line: 19-19>
                    factor : variable 	<Line: 19-19>
                     variable : ID 	<Line: 19-19>
                      ID : i	<Line: 19>
                  MULOP : %	<Line: 19>
                  unary_expression : factor 	<Line: 19-19>
                   factor : CONST_INT 	<Line: 19-19>
                    CONST_INT : 3	<Line: 19>
                RELOP : ==	<Line: 19>
                simple_expression : term 	<Line: 19-19>
                 term : unary_expression 	<Line: 19-19>
                  unary_expression : factor 	<Line: 19-19>
                   factor : CONST_INT 	<Line: 19-19>
                    CONST_INT : 0	<Line: 19>
             RPAREN : )	<Line: 19>
             statement : compound_statement 	<Line: 19-21>
              compound_statement : LCURL statements RCURL 	<Line: 19-21>
               LCURL : {	<Line: 19>
               statements : statement 	<Line: 20-20>
                statement : expression_statement 	<Line: 20-20>
                 expression_statement : expression SEMICOLON 	<Line: 20-20>
                  expression : variable ASSIGNOP logic_expression 	<Line: 20-20>
                   variable : ID 	<Line: 20-20>
                    ID : x	<Line: 20>
                   ASSIGNOP : =	<Line: 20>
                   logic_expression : rel_expression 	<Line: 20-20>
                    rel_expression : simple_expression 	<Line: 20-20>
                     simple_expression : simple_expression ADDOP term 	<Line: 20-20>
                      simple_expression : term 	<Line: 20-20>
                       term : unary_expression 	<Line: 20-20>
                        unary_expression : factor 	<Line: 20-20>
                         factor : variable 	<Line: 20-20>
                          variable : ID 	<Line: 20-20>
                           ID : x	<Line: 20>
                      ADDOP : +	<Line: 20>
                      term : unary_expression 	<Line: 20-20>
                       unary_expression : factor 	<Line: 20-20>
                        factor : CONST_INT 	<Line: 20-20>
                         CONST_INT : 5	<Line: 20>
                  SEMICOLON : ;	<Line: 20>
               RCURL : }	<Line: 21>
             ELSE : else	<Line: 22>
             statement : compound_statement 	<Line: 22-24>
              compound_statement : LCURL statements RCURL 	<Line: 22-24>
               LCURL : {	<Line: 22>
               statements : statement 	<Line: 23-23>
                statement : expression_statement 	<Line: 23-23>
                 expression_statement : expression SEMICOLON 	<Line: 23-23>
                  expression : variable ASSIGNOP logic_expression 	<Line: 23-23>
                   variable : ID 	<Line: 23-23>
                    ID : x	<Line: 23>
                   ASSIGNOP : =	<Line: 23>
                   logic_expression : rel_expression 	<Line: 23-23>
                    rel_expression : simple_expression 	<Line: 23-23>
                     simple_expression : simple_expression ADDOP term 	<Line: 23-23>
                      simple_expression : term 	<Line: 23-23>
                       term : unary_expression 	<Line: 23-23>
                        unary_expression : factor 	<Line: 23-23>
                         factor : variable 	<Line: 23-23>
                          variable : ID 	<Line: 23-23>
                           ID : x	<Line: 23>
                      ADDOP : -	<Line: 23>
                      term : unary_expression 	<Line: 23-23>
                       unary_expression : factor 	<Line: 23-23>
                        factor : CONST_INT 	<Line: 23-23>
                         CONST_INT : 1	<Line: 23>
                  SEMICOLON : ;	<Line: 23>
               RCURL : }	<Line: 24>
           RCURL : }	<Line: 25>
       statement : RETURN expression SEMICOLON 	<Line: 27-27>
        RETURN : return	<Line: 27>
        expression : logic_expression 	<Line: 27-27>
         logic_expression : rel_expression 	<Line: 27-27>
          rel_expression : simple_expression 	<Line: 27-27>
           simple_expression : term 	<Line: 27-27>
            term : unary_expression 	<Line: 27-27>
             unary_expression : factor 	<Line: 27-27>
              factor : variable 	<Line: 27-27>
               variable : ID 	<Line: 27-27>
                ID : x	<Line: 27>
        SEMICOLON : ;	<Line: 27>
      RCURL : }	<Line: 28>
  unit : func_definition 	<Line: 30-47>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 30-47>
    type_specifier : INT 	<Line: 30-30>
     INT : int	<Line: 30>
    ID : main	<Line: 30>
    LPAREN : (	<Line: 30>
    RPAREN : )	<Line: 30>
    compound_statement : LCURL statements RCURL 	<Line: 30-47>
     LCURL : {	<Line: 30>
     statements : statements statement 	<Line: 31-46>
      statements : statements statement 	<Line: 31-35>
       statements : statements statement 	<Line: 31-34>
        statements : statements statement 	<Line: 31-33>
         statements : statements statement 	<Line: 31-32>
          statements : statement 	<Line: 31-31>
           statement : var_declaration 	<Line: 31-31>
            var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 31-31>
             type_specifier : INT 	<Line: 31-31>
              INT : int	<Line: 31>
             declaration_list : declaration_list COMMA ID 	<Line: 31-31>
              declaration_list : declaration_list COMMA ID 	<Line: 31-31>
               declaration_list : ID 	<Line: 31-31>
                ID : a	<Line: 31>
               COMMA : ,	<Line: 31>
               ID : b	<Line: 31>
              COMMA : ,	<Line: 31>
              ID : i	<Line: 31>
             SEMICOLON : ;	<Line: 31>
          statement : expression_statement 	<Line: 32-32>
           expression_statement : expression SEMICOLON 	<Line: 32-32>
            expression : variable ASSIGNOP logic_expression 	<Line: 32-32>
             variable : ID 	<Line: 32-32>
              ID : a	<Line: 32>
             ASSIGNOP : =	<Line: 32>
             logic_expression : rel_expression 	<Line: 32-32>
              rel_expression : simple_expression 	<Line: 32-32>
               simple_expression : term 	<Line: 32-32>
                term : unary_expression 	<Line: 32-32>
                 unary_expression : factor 	<Line: 32-32>
                  factor : CONST_INT 	<Line: 32-32>
                   CONST_INT : 1	<Line: 32>
            SEMICOLON : ;	<Line: 32>
         statement : expression_statement 	<Line: 33-33>
          expression_statement : expression SEMICOLON 	<Line: 33-33>
           expression : variable ASSIGNOP logic_expression 	<Line: 33-33>
            variable : ID 	<Line: 33-33>
             ID : b	<Line: 33>
            ASSIGNOP : =	<Line: 33>
            logic_expression : rel_expression 	<Line: 33-33>
             rel_expression : simple_expression 	<Line: 33-33>
              simple_expression : term 	<Line: 33-33>
               term : unary_expression 	<Line: 33-33>
                unary_expression : factor 	<Line: 33-33>
                 factor : CONST_INT 	<Line: 33-33>
                  CONST_INT : 2	<Line: 33>
           SEMICOLON : ;	<Line: 33>
        statement : expression_statement 	<Line: 34-34>
         expression_statement : expression SEMICOLON 	<Line: 34-34>
          expression : variable ASSIGNOP logic_expression 	<Line: 34-34>
           variable : ID 	<Line: 34-34>
            ID : a	<Line: 34>
           ASSIGNOP : =	<Line: 34>
           logic_expression : rel_expression 	<Line: 34-34>
            rel_expression : simple_expression 	<Line: 34-34>
             simple_expression : term 	<Line: 34-34>
              term : unary_expression 	<Line: 34-34>
               unary_expression : factor 	<Line: 34-34>
                factor : ID LPAREN argument_list RPAREN 	<Line: 34-34>
                 ID : g	<Line: 34>
                 LPAREN : (	<Line: 34>
                 argument_list : arguments 	<Line: 34-34>
                  arguments : arguments COMMA logic_expression 	<Line: 34-34>
                   arguments : logic_expression 	<Line: 34-34>
                    logic_expression : rel_expression 	<Line: 34-34>
                     rel_expression : simple_expression 	<Line: 34-34>
                      simple_expression : term 	<Line: 34-34>
                       term : unary_expression 	<Line: 34-34>
                        unary_expression : factor 	<Line: 34-34>
                         factor : variable 	<Line: 34-34>
                          variable : ID 	<Line: 34-34>
                           ID : a	<Line: 34>
                   COMMA : ,	<Line: 34>
                   logic_expression : rel_expression 	<Line: 34-34>
                    rel_expression : simple_expression 	<Line: 34-34>
                     simple_expression : term 	<Line: 34-34>
                      term : unary_expression 	<Line: 34-34>
                       unary_expression : factor 	<Line: 34-34>
                        factor : variable 	<Line: 34-34>
                         variable : ID 	<Line: 34-34>
                          ID : b	<Line: 34>
                 RPAREN : )	<Line: 34>
          SEMICOLON : ;	<Line: 34>
       statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 35-35>
        PRINTLN : println	<Line: 35>
        LPAREN : (	<Line: 35>
        ID : a	<Line: 35>
        RPAREN : )	<Line: 35>
        SEMICOLON : ;	<Line: 35>
      statement : RETURN expression SEMICOLON 	<Line: 46-46>
       RETURN : return	<Line: 46>
       expression : logic_expression 	<Line: 46-46>
        logic_expression : rel_expression 	<Line: 46-46>
         rel_expression : simple_expression 	<Line: 46-46>
          simple_expression : term 	<Line: 46-46>
           term : unary_expression 	<Line: 46-46>
            unary_expression : factor 	<Line: 46-46>
             factor : CONST_INT 	<Line: 46-46>
              CONST_INT : 0	<Line: 46>
       SEMICOLON : ;	<Line: 46>
     RCURL : }	<Line: 47>
