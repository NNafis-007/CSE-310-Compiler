start : program 	<Line: 1-15>
 program : unit 	<Line: 1-15>
  unit : func_definition 	<Line: 1-15>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 1-15>
    type_specifier : INT 	<Line: 1-1>
     INT : int	<Line: 1>
    ID : main	<Line: 1>
    LPAREN : (	<Line: 1>
    RPAREN : )	<Line: 1>
    compound_statement : LCURL statements RCURL 	<Line: 1-15>
     LCURL : {	<Line: 1>
     statements : statements statement 	<Line: 3-14>
      statements : statements statement 	<Line: 3-12>
       statements : statements statement 	<Line: 3-7>
        statements : statements statement 	<Line: 3-6>
         statements : statements statement 	<Line: 3-5>
          statements : statement 	<Line: 3-3>
           statement : var_declaration 	<Line: 3-3>
            var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 3-3>
             type_specifier : INT 	<Line: 3-3>
              INT : int	<Line: 3>
             declaration_list : declaration_list COMMA ID 	<Line: 3-3>
              declaration_list : declaration_list COMMA ID 	<Line: 3-3>
               declaration_list : ID 	<Line: 3-3>
                ID : i	<Line: 3>
               COMMA : ,	<Line: 3>
               ID : j	<Line: 3>
              COMMA : ,	<Line: 3>
              ID : k	<Line: 3>
             SEMICOLON : ;	<Line: 3>
          statement : expression_statement 	<Line: 5-5>
           expression_statement : expression SEMICOLON 	<Line: 5-5>
            expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
             variable : ID 	<Line: 5-5>
              ID : i	<Line: 5>
             ASSIGNOP : =	<Line: 5>
             logic_expression : rel_expression 	<Line: 5-5>
              rel_expression : simple_expression 	<Line: 5-5>
               simple_expression : term 	<Line: 5-5>
                term : unary_expression 	<Line: 5-5>
                 unary_expression : factor 	<Line: 5-5>
                  factor : CONST_INT 	<Line: 5-5>
                   CONST_INT : 3	<Line: 5>
            SEMICOLON : ;	<Line: 5>
         statement : expression_statement 	<Line: 6-6>
          expression_statement : expression SEMICOLON 	<Line: 6-6>
           expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
            variable : ID 	<Line: 6-6>
             ID : j	<Line: 6>
            ASSIGNOP : =	<Line: 6>
            logic_expression : rel_expression 	<Line: 6-6>
             rel_expression : simple_expression 	<Line: 6-6>
              simple_expression : term 	<Line: 6-6>
               term : unary_expression 	<Line: 6-6>
                unary_expression : factor 	<Line: 6-6>
                 factor : CONST_INT 	<Line: 6-6>
                  CONST_INT : 8	<Line: 6>
           SEMICOLON : ;	<Line: 6>
        statement : expression_statement 	<Line: 7-7>
         expression_statement : expression SEMICOLON 	<Line: 7-7>
          expression : variable ASSIGNOP logic_expression 	<Line: 7-7>
           variable : ID 	<Line: 7-7>
            ID : k	<Line: 7>
           ASSIGNOP : =	<Line: 7>
           logic_expression : rel_expression 	<Line: 7-7>
            rel_expression : simple_expression 	<Line: 7-7>
             simple_expression : term 	<Line: 7-7>
              term : unary_expression 	<Line: 7-7>
               unary_expression : factor 	<Line: 7-7>
                factor : CONST_INT 	<Line: 7-7>
                 CONST_INT : 6	<Line: 7>
          SEMICOLON : ;	<Line: 7>
       statement : IF LPAREN expression RPAREN statement 	<Line: 10-12>
        IF : if	<Line: 10>
        LPAREN : (	<Line: 10>
        expression : logic_expression 	<Line: 10-10>
         logic_expression : rel_expression 	<Line: 10-10>
          rel_expression : simple_expression RELOP simple_expression 	<Line: 10-10>
           simple_expression : term 	<Line: 10-10>
            term : unary_expression 	<Line: 10-10>
             unary_expression : factor 	<Line: 10-10>
              factor : variable 	<Line: 10-10>
               variable : ID 	<Line: 10-10>
                ID : i	<Line: 10>
           RELOP : ==	<Line: 10>
           simple_expression : term 	<Line: 10-10>
            term : unary_expression 	<Line: 10-10>
             unary_expression : factor 	<Line: 10-10>
              factor : CONST_INT 	<Line: 10-10>
               CONST_INT : 3	<Line: 10>
        RPAREN : )	<Line: 10>
        statement : compound_statement 	<Line: 10-12>
         compound_statement : LCURL statements RCURL 	<Line: 10-12>
          LCURL : {	<Line: 10>
          statements : statement 	<Line: 11-11>
           statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 11-11>
            PRINTLN : println	<Line: 11>
            LPAREN : (	<Line: 11>
            ID : j	<Line: 11>
            RPAREN : )	<Line: 11>
            SEMICOLON : ;	<Line: 11>
          RCURL : }	<Line: 12>
      statement : RETURN expression SEMICOLON 	<Line: 14-14>
       RETURN : return	<Line: 14>
       expression : logic_expression 	<Line: 14-14>
        logic_expression : rel_expression 	<Line: 14-14>
         rel_expression : simple_expression 	<Line: 14-14>
          simple_expression : term 	<Line: 14-14>
           term : unary_expression 	<Line: 14-14>
            unary_expression : factor 	<Line: 14-14>
             factor : CONST_INT 	<Line: 14-14>
              CONST_INT : 0	<Line: 14>
       SEMICOLON : ;	<Line: 14>
     RCURL : }	<Line: 15>
